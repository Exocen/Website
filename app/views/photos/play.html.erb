<% provide(:title,"PhotoPlay") %>
<%= javascript_include_tag "koala" %>

<div id="center">
  <div id="cont">
    <noscript>
      Your browser does not support JavaScript or it is disabled.<br>
      JavaScript is needed to view this site.
    </noscript>
    <div id="dots"></div>
  </div>
</div>

<script type="text/javascript">
  // Code left intentionally unminimized for your reading pleasure.

  (function() {
    window.shownFile = 'none';

    // If an error happens I want to know about it!
    window.onerror = function(msg, url, ln) {
      msg = msg.toString();
      // In Chrome and Firefox an error on a script form a foreign domain will cause this, see link bellow:
      // http://stackoverflow.com/questions/5913978/cryptic-script-error-reported-in-javascript-in-chrome-and-firefox
      if (msg === 'Script error.' && url === '' && ln === 0) return;
      window.onerror = function() {};
    };

    // First, make sure we can run.
    if (!koala.supportsCanvas()) {
      alert("Sorry, KoalsToTheMax needs HTML5 Canvas support which your browser does not have. Supported browsers include Chrome, Safari, Firefox, Opera, and Internet Explorer 9, 10");
      return;
    }

    if (!koala.supportsSVG()) {
      alert("Sorry, KoalsToTheMax needs SVG support which your browser does not have. Supported browsers include Chrome, Safari, Firefox, Opera, and Internet Explorer 9, 10");
      return;
    }

    // This is strange, track it if it happens.
    if (!window.d3) {
      alert("Some how D3 was not loaded so the site can not start. This is bad... We are investigating. Try refreshing the page and see if that helps.");
      return;
    }

    // Try you must. If there is an error report it to me.
    try {
      // btoa and atob do not handle utf-8 as I have discovered the hard way so they need to babied
      // See: https://developer.mozilla.org/en-US/docs/DOM/window.btoa#Unicode_Strings
      function utf8_to_b64(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
      }

      function b64_to_utf8(str) {
        return decodeURIComponent(escape(window.atob(str)));
      }

      function goToHidden(location, string) {
        location.href = '//' + location.host + location.pathname + '?' + utf8_to_b64(string);
      }

      function basicLoad() {
        var file =   "<%= @photo.image.url(:large) if @photo%>"
        return {
          file: file,
          shownFile: location.protocol + '//' + location.host + location.pathname + file
        };
      }

      function parseUrl(location) {
        var href = location.href;
        var idx, param, file;

        idx = href.indexOf('?');
        if (idx === -1 || idx === href.length - 1) {
          return basicLoad(); // Case 1
        }

        param = href.substr(idx + 1);
        if (!/^[a-z0-9+\/]+=*$/i.test(param)) {
          // Does not look base64
          goToHidden(location, param);
          return null;
        }

        // At this point param is a JS object
        if (Array.isArray(param) && param.length) {
          // Case 2b
          file = param[Math.floor(Math.random() * param.length)];
          return {
            file: file,
            shownFile: file
          };
        }

        if (Array.isArray(param.images) && param.images.length) {
          // Case 2c
          file = param.images[Math.floor(Math.random() * param.images.length)];
          return {
            file: file,
            shownFile: file,
            background: param.background,
            hideNote: param.hideNote
          };
        }

        // Fall though
        return basicLoad();
      }

      var parse = parseUrl(location);
      if (!parse) return;
      var file = parse.file;
      window.shownFile = parse.shownFile;

      if (parse.background) {
        d3.select(document.body)
          .style('background', parse.background);
      }
      if (parse.hideNote) {
        d3.select('#footer')
          .style('display', 'none');
      }

      if (/^https?:/.test(file)) {
        file = "image-server.php?url=" + file;
      }

      function onEvent(what, value) {


        if (what === 'LayerClear' && value == 0) {
          d3.select('#next')
            .style('display', null)
            .select('input')
              .on('keydown', function() {
                d3.select('div.err').remove();
                if (d3.event.keyCode !== 13) return;
                var input = d3.select(this).property('value');

                if (input.match(/^http:\/\/.+\..+/i)) {
                  d3.select('#next div.msg').text('Thinking...');
                  d3.select(this).style('display', 'none');
                  setTimeout(function() {
                    goToHidden(location, input);
                  }, 750);
                } else {
                  d3.select('#next').selectAll('div.err').data([0])
                    .enter().append('div')
                    .attr('class', "err")
                    .text("That doesn't appear to be a valid image URL. [Hint: it should start with 'http://']")
                }
              });
        }
      }

      var img = new Image();
      img.onload = function() {
        var colorData;
        try {
          colorData = koala.loadImage(this);
        } catch (e) {
          colorData = null;
        alert("Sorry, KoalsToTheMax could not load the image '" + file + "'");
          setTimeout(function() {
            window.location.href = domian;
          }, 750);
        }
        if (colorData) {
          koala.makeCircles("#dots", colorData, onEvent);
          }
      };
      img.src = file;
    } catch (e) {
      }



  })();
</script>
